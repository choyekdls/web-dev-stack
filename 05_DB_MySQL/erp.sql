/*
  DB모델링 
  1. 개념적 모델링
     - 엔티티(테이블) 추출
     - 엔티티 간의 관계설정
  2. 논리적 모델링
     - 속성(컬럼) 추출
     - 정규화 작업 (1, 2, 3) ----> 이 이상으로 가면 역정규화
  3. 물리적 모델링
     - 테이블 실질적으로 작성 (CREATE 문 작성)
  
  * 정규화(Nomalization)
  - 불필요한 데이터의 중복을 제거하여 데이터모델을 구조화하는 것
  - 효율적인 자료 저장 및 데이터 무결성을 보장하고 오류를 최소화 하여 안정성을 보장하기 위해 적용함
    
    제 1 정규화 : 복수의 속성값을 갖는 속성을 분리
    제 2 정규화 : 주 식별자에 종속되지 않는 속성을 분리
    제 3 정규화 : 속성에 종속적인 속성을 제거
*/

/*
  사용자 OR 사원 관련 정보 들어가는 테이블 하나 CREATE 문 작성해서 제출
  -> PRIMARY KET : AUTO_INCREMENT (오라클의 GENERATE 뭐시기 대체)
  
  MySQL
  - 데이터 타입
  1. 문자 
     - CHAR / **VARCHAR** : 고정 및 가변 길이 문자, 반드시 크기 지정
     - **TEXT** : 매우 긴 문자열을 저장하는데 사용
  2. 숫자
     - **INT** : 정수값 저장하는데 사용
     - FLOAT / DOUBLE : 부동소수점 저장하는데 사용
     - DECIMAL : 고정소수점 저장하는데 사용
  3. 날짜 및 시간
     - **DATE** : 날짜 저장하는데 사용
     - TIME : 시간 저장하는데 사용
     - **DATETIME** / TIMESTAMP : 날짜와 시간을 함께 저장 (DEFAULT (NOW())
  4. 불리언
     - BOOLEAN / BOOL : 참(TRUE) 또는 거짓(FALSE) 값을 저장하는데 사용
  5. 이진 자료형 (사용추천X)
     - BLOB : 이진 데이터를 저장하는데 사용. 이미지나 동영상과 같은 이진 파일
	 --> 실제로는 이미지나 동영상은 따로 관리 (URL만 문자형으로 저장)
*/
DROP TABLE PROJECT_MEMBERS;
DROP TABLE USER_INFO;
DROP TABLE DEPARTMENT;
DROP TABLE GRADE;
DROP TABLE PROJECT_TASKS;
DROP TABLE PROJECT;


CREATE TABLE USER_INFO(
USER_NO INT PRIMARY KEY AUTO_INCREMENT,
ID VARCHAR(50) UNIQUE NOT NULL,
PASSWORD VARCHAR(300) NOT NULL,
EMAIL VARCHAR(100) UNIQUE,
NAME VARCHAR(50) NOT NULL,
PHONE VARCHAR(50) UNIQUE,
ADDR VARCHAR(200),
GENDER VARCHAR(10) CHECK (GENDER IN ('남', '여')),
BIRTH_DATE DATE,
HIRE_DATE DATE DEFAULT (CURRENT_DATE) ,
QUIT_DATE DATE,
DEPT_NO INT,
GRADE_NO INT
);

CREATE TABLE DEPARTMENT(
DEPT_NO INT PRIMARY KEY AUTO_INCREMENT,
DEPT_NAME VARCHAR(100) NOT NULL,
DEPT_COLOR VARCHAR(50)
);

CREATE TABLE GRADE(
GRADE_NO INT PRIMARY KEY AUTO_INCREMENT,
GRADE_NAME VARCHAR(100) NOT NULL
);

-- 프로젝트 관리 : 테이블 몇개든 상관없이 짜보시고 FOREIGN KEY 까지 걸어보는 것까지!
-- 테이블 필요한 컬럼 짜기 힘드시다면 어떤 기능이 있어야 되는지 정도로 제출해도 괜찮아요! ~내일까지

CREATE TABLE PROJECT (
PRO_NO INT AUTO_INCREMENT PRIMARY KEY,
PRO_NAME VARCHAR(100) NOT NULL,
PRO_DESC TEXT,
START_DATE DATE,
END_DATE DATE,
STATUS VARCHAR(10) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단'))
);
-- 프로젝트 정보 테이블
/* CREATE TABLE PROJECTS(
PROJECT_ID INT PRIMARY KEY AUTO_INCREMENT,
PROJECT_NAME VARCHAR(100) NOT NULL,
PROJECT_DESCRIPTION TEXT,
PROJECT_START_DATE DATE,
PROJECT_END_DATE DATE NOT NULL,
CREATED_DATE DATE DEFAULT (CURRENT_DATE)
);*/

-- 프로젝트 참여 멤버 정보 테이블
/* CREATE TABLE PROJECT_MEMBERS (
PROJECT_ID INT,
ID VARCHAR(50) UNIQUE NOT NULL,
ROLE VARCHAR(100) NOT NULL
);
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(PROJECT_ID);
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (ID) REFERENCES USER_INFO(ID);*/

-- 프로젝트 업무 할당
/* CREATE TABLE TASKS (
TASK_ID INT PRIMARY KEY AUTO_INCREMENT,
PROJECT_ID INT,
ASSIGNED_TASK INT NOT NULL,
TASK_TITLE VARCHAR(300) NOT NULL,
DESCRIPTION TEXT,
PRIORITY VARCHAR(20) CHECK (PRIORITY IN ('HIGH', 'MID', 'LOW')),
DUE_DATE DATE,
CREATED_DATE DATE DEFAULT (CURRENT_DATE),
UPDATED_DATE DATE DEFAULT (CURRENT_DATE)
);
ALTER TABLE TASKS ADD FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(PROJECT_ID);
ALTER TABLE TASKS ADD FOREIGN KEY (ASSIGNED_TASK) REFERENCES USER_INFO(ID); */
-- PROJECT_MEMBERS : USER_NO, PRO_NO
CREATE TABLE PROJECT_MEMBERS(
MEMBER_NO INT AUTO_INCREMENT PRIMARY KEY,
USER_NO INT,
PRO_NO INT,
ROLE VARCHAR(50)
);

-- 프로젝트 : 업무들 = 1:M
-- PROJECT_MEMBERS : PRO_NO

CREATE TABLE PROJECT_TASKS(
TASK_NO INT AUTO_INCREMENT PRIMARY KEY,
PRO_NO INT,
TASK_NAME VARCHAR(100),
TASK_DESC TEXT,
STATUS VARCHAR(30) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단')),
START_DATE DATE,
END_DATE DATE,
PARENT_TASK_NO INT
);

-- 일정 관리!
CREATE TABLE SCHEDULE (
SCHEDULE_NO INT AUTO_INCREMENT PRIMARY KEY,
SCHEDULE_TITLE VARCHAR(100) NOT NULL,
SCHEDULE_DESC TEXT,
START_DATE DATE,
END_DATE DATE,
STATUS VARCHAR(30) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단')),
LOCATION VARCHAR(200),
PRO_NO INT,
TASK_NO INT,
USER_NO INT
);

CREATE TABLE SCHEDULE_MEMBERS(
SCH_MEM_NO INT AUTO_INCREMENT PRIMARY KEY,
USER_NO INT,
SCHEDULE_NO INT
);

-- 고객관계관리
-- 고객마다 담당자가 지정된 상태
CREATE TABLE CUSTOMER(
CUSTOMER_NO INT AUTO_INCREMENT PRIMARY KEY,
NAME VARCHAR(100) NOT NULL,
PHONE VARCHAR(20),
EMAIL VARCHAR(100),
COMPANY VARCHAR(100),
USER_NO INT
);

-- 고객과의 계약 정보
CREATE TABLE CUSTOMER_CONTRACT (
CONTRACT_NO INT AUTO_INCREMENT PRIMARY KEY,
TITLE VARCHAR(100) NOT NULL,
CONTENT TEXT,
PAY INT,
START_DATE DATE,
END_DATE DATE,
STATUS VARCHAR(30) CHECK (STATUS IN ('계약전', '진행증', '완료', '파기')),
CREATE_DATE DATETIME DEFAULT (CURRENT_DATE),
CUSTOMER_NO INT
);

CREATE TABLE CUSTOMER_CLAIM (
CLAIM_NO INT AUTO_INCREMENT PRIMARY KEY,
TITLE VARCHAR(100) NOT NULL,
CONTENT TEXT,
PHOTO_URL VARCHAR(200),
STATUS VARCHAR(30) CHECK (STATUS IN ('제출', '해결중', '완료')),
CREATE_DATE DATETIME DEFAULT (CURRENT_TIME),
CUSTOMER_NO INT
);

-- 인적자원관리: 연차, 인사평가, 출퇴근
CREATE TABLE HRM_LEAVES(
LEAVE_NO INT AUTO_INCREMENT PRIMARY KEY,
START_DATE DATE,
END_DATE DATE,
REASON TEXT,
STATUS VARCHAR(30) CHECK (STATUS IN ('신청', '승인', '반려')) DEFAULT '신청',
CREATE_DATE DATETIME DEFAULT (CURRENT_DATE),
USER_NO INT
);

CREATE TABLE HRM_EVALUATION(
EVALUATE_NO INT AUTO_INCREMENT PRIMARY KEY,
EVALUATE_DATE DATE,
EVALUATE_ID INT, -- 평가자
SCORE INT, 
COMMENT TEXT,
USER_NO INT -- 평가 당하는 사람
);

CREATE TABLE HRM_WORK(
WORK_NO INT AUTO_INCREMENT PRIMARY KEY,
WORK_START DATETIME DEFAULT (CURRENT_DATE),
WORK_END DATETIME,
STATUS VARCHAR(30) CHECK (STATUS IN ('정상', '지각', '결근', '조퇴', '휴가')),
USER_NO INT
);

-- 재무관리 : 월급, 비용 지출 및 수입 관리
CREATE TABLE FINANCIAL_SALARY(
SALARY_NO INT AUTO_INCREMENT PRIMARY KEY,
SALARY_DATE DATE,
BASE_ALARY INT, 
BONUS INT,
DEDUCTION INT,
TAX INT,
USER_NO INT
);

CREATE TABLE FINANCIAL_BUDGET (
BUDGET_NO INT AUTO_INCREMENT PRIMARY KEY,
TARGET_SALES INT, 
ANNUAL_BUDGET INT NOT NULL,
ANNUAL_PLAN TEXT, 
ACHIEVED VARCHAR(2) CHECK (ACHIEVED IN ('T', 'F')),
DEPT_NO INT
);

CREATE TABLE FINANCIAL_TRANSACTION(
TRANS_NO INT AUTO_INCREMENT PRIMARY KEY,
TRANS_AMOUNT INT,
TRANS_DESC TEXT NOT NULL, -- 지출 및 수입 내역 상세 정보
TRANS_DATE DATE NOT NULL, -- 지출 및 수입 내역 발생 일자
USER_NO INT
);

-- 품질보증관리
CREATE TABLE QUALITY (
QUALITY_NO INT AUTO_INCREMENT PRIMARY KEY,
QUALUTY_DATE DATE,
ITEM_NAME VARCHAR(50) NOT NULL,
STATUS VARCHAR(30) CHECK (STATUS IN ('정상', '불량', '조치필요')),
USER_NO INT
);

-- 불량품 관리
CREATE TABLE QUALITY_DEFECT_ITEM(
DEFECT_NO INT AUTO_INCREMENT PRIMARY KEY,
QUALITY_NO INT,
DEFECT_DEXC TEXT,
RESOLUTION_DESC TEXT,
RESOLUTION_DATE DATE,
USER_NO INT
);

-- DEPT_NO, GRADE_NO
ALTER TABLE USER_INFO ADD FOREIGN KEY (DEPT_NO) REFERENCES DEPARTMENT(DEPT_NO);
ALTER TABLE USER_INFO ADD FOREIGN KEY (GRADE_NO) REFERENCES GRADE(GRADE_NO);

-- PROJECT_MEMBERS :USER_NO, PRO_NO
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- PROJECT_TASKS :PRO_NO
ALTER TABLE PROJECT_TASKS ADD FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);

-- SCHEDULE : PRO_NO, TASK_NO, USER_NO
ALTER TABLE SCHEDULE ADD FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);
ALTER TABLE SCHEDULE ADD FOREIGN KEY (TASK_NO) REFERENCES PROJECT_TASKS(TASK_NO);
ALTER TABLE SCHEDULE ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- SCHEDULE_MEMBERS : SCHEDULE_NO
ALTER TABLE  SCHEDULE_MEMBERS ADD FOREIGN KEY (SCHEDULE_NO) REFERENCES SCHEDULE(SCHEDULE_NO);

-- CUSTOMER : USER_NO
ALTER TABLE  CUSTOMER ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- CUSTOMER_CONTRACT : CUSTOMER_NO
ALTER TABLE  CUSTOMER_CONTRACT ADD FOREIGN KEY (CUSTOMER_NO) REFERENCES CUSTOMER(CUSTOMER_NO);

-- CUSTOMER_CLAIM : CUSTOMER_NO
ALTER TABLE  CUSTOMER_CLAIM ADD FOREIGN KEY (CUSTOMER_NO) REFERENCES CUSTOMER(CUSTOMER_NO);

-- HRM_LEAVES : USER_NO
ALTER TABLE  HRM_LEAVES ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- HRM_EVALUATION : USER_NO
ALTER TABLE  HRM_EVALUATION ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- HRM_WORK : USER_NO
ALTER TABLE  HRM_WORK ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- FINANCIAL_SALARY : USER_NO
ALTER TABLE  FINANCIAL_SALARY ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- FINANCIAL_BUDGET : DEPT_NO
ALTER TABLE FINANCIAL_BUDGET ADD FOREIGN KEY (DEPT_NO) REFERENCES DEPARTMENT(DEPT_NO);

-- FINANCIAL_TRANSACTION : USER_NO
ALTER TABLE  FINANCIAL_TRANSACTION ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- QUALITY : USER_NO
ALTER TABLE  QUALITY ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- QUALITY_DEFECT_ITEM : QUALITY_NO, USER_NO
ALTER TABLE  QUALITY_DEFECT_ITEM ADD FOREIGN KEY (QUALITY_NO) REFERENCES QUALITY(QUALITY_NO);
ALTER TABLE  QUALITY_DEFECT_ITEM ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

/* -- 업무 진행 이력
CREATE TABLE TASK_HISTORY(
TASK_ID INT,
CHANGED_BY INT,
OLD_INFO TEXT,
NEW_INFO TEXT,
UPDATED_DATE DATE
);
ALTER TABLE TASK_HISTORY ADD FOREIGN KEY (TASK_ID) REFERENCES TASKS(TASK_ID);
ALTER TABLE TASK_HISTORY ADD FOREIGN KEY (CHANGED_BY) REFERENCES USER_INFO(ID);

-- 진행 업무 피드백
CREATE TABLE FEEDBACK(
FEEDBACK_NO INT PRIMARY KEY AUTO_INCREMENT,
TASK_ID INT,
ID INT,
FEEDBACK TEXT NOT NULL,
CREATED_DATE DATE DEFAULT (CURRENT_DATE)
);
ALTER TABLE FEEDBACK ADD FOREIGN KEY (TASK_ID) REFERENCES TASKS(TASK_ID);
ALTER TABLE FEEDBACK ADD FOREIGN KEY (ID) REFERENCES USER_INFO(ID);

-- 첨부파일 업로드
CREATE TABLE ATTACHMENTS(
ATTACHMENT_ID INT PRIMARY KEY AUTO_INCREMENT,
TASK_ID INT,
FILE_NAME VARCHAR(300) NOT NULL,
FILE_URL TEXT NOT NULL,
UPLOADED_BY INT
);
ALTER TABLE ATTACHMENTS ADD FOREIGN KEY (TASK_ID) REFERENCES TASKS(TASK_ID);
ALTER TABLE ATTACHMENTS ADD FOREIGN KEY (UPLOADED_BY) REFERENCES USER_INFO(ID);

-- 업무 진행상황 업로드 알림
CREATE TABLE NOTIFICATIONS (
NOTIFICATION_ID INT PRIMARY KEY AUTO_INCREMENT,
ID INT,
MESSAGE TEXT NOT NULL,
READ_YN BOOL, -- 또는 CHECK (READ_YN ('Y', 'N'))
CREATED_DATE DATE DEFAULT (CURRENT_DATE)
);
ALTER TABLE NOTIFICATIONS ADD FOREIGN KEY (ID) REFERENCES USER_INFO(ID);
*/

/*고객 관계 관리 (B2B/B2C)
-- CUSTOMER_B2B
CREATE TABLE COMPANY(
   COMPANY_NO INT AUTO_INCREMENT PRIMARY KEY,
   COMPANY_NAME VARCHAR(200) NOT NULL,
   ITEM_NO INT NOT NULL, -- 거래 품목
   ITEM_NAME VARCHAR(300) NOT NULL,
   FIRST_TRADE DATE NOT NULL,
   ADDR VARCHAR(500) NOT NULL,
   PHONE VARCHAR(50) NOT NULL,
   USER_NO INT -- 거래처 별 본사 담당자
   );
-- CUSTOMER_B2C (등급도 추가하면 좋을 것 같음)
CREATE TABLE CUSTOMER(
   CUSTOMER_NO INT AUTO_INCREMENT PRIMARY KEY,
   CUSTOMER_NAME VARCHAR(50) NOT NULL,
   CUSTOEMR_ID VARCHAR(300) NOT NULL,
   CUSTOMER_PW VARCHAR(300) NOT NULL,
   PHONE VARCHAR(50) NOT NULL
   );
/*클레임 관리
CREATE TABLE CLAIM (
   CLAIM_NO INT AUTO_INCREMENT PRIMARY KEY,
   TITLE VARCHAR(500) NOT NULL,
   PHOTO -- 첨부 파일? VARCHAR?,
   CLAIM_DESC TEXT,
   PRODUCT_RECALL VARCHAR(50) CHECK (RECALL IN ('전량 회수', '일부 회수', '회수 불가'))
   EXPLANATION TEXT -- 클레임 관련 해명서
   COMPENSATION VARCHAR(500) NOT NULL
   COMPANY_NO INT,
   CUSTOMER_NO INT
);*/

/*인적 자원 관리

CREATE TABLE HR(
   USER_NO INT AUTO_INCREMENT PRIMARY KEY,
   NAME VARCHAR(50),
   HIRE_DATE DATE,
   LENGTH_OF DATE, -- 근무연수에 따라 연차 추가 지급 및 포상 지급
   ANNUAL_LEAVE_DAYS INT DEFAULT 15, 
   USED_ ANNUAL_LEAVE_DAYS INT DEFAULT 0,
   REMAINING_ANNUAL_LEAVE AS ( ANNUAL_LEAVE_DAYS - USED_ ANNUAL_LEAVE_DAYS) INT,
   EDUCATION VARCHAR(500) -- 교육, 훈련
   BENEFIT_NO INT AUTO_INCREMENT PRIMARY KEY, -- 복리후생
   BENEFIT_NAME VARCHAR(100)
);
/*재무 관리
-- 비용 지출 및 수입 관리
CREATE TABLE FINANCIAL_TRANSACTION(
TRANS_NO INT AUTO_INCREMENT PRIMARY KEY, -- 지출 및 수입 내역
TRANS_DESC TEXT NOT NULL, -- 지출 및 수입 내역 상세 정보
TRANS_DATE DATE NOT NULL, -- 지출 및 수입 내역 발생 일자
CATEGORY VARCHAR(300) -- 지출 발생 및 수입 발생 카테고리
CREDIT_CARD INT, -- 법인 카드 관리 (카드는 뒤 네 자리 번호만 .....)
USER_NO INT,
DEPT_NO INT,
COMPANY_NO INT,
COMPENSATION INT
);
-- 예산 관리
-- 부서 별로 책정된 연간 예산
CREATE TABLE BUDGET (
   DEPT_NO INT,
   TARGET_SALES INT, -- 목표 매출
   ANNUAL_BUDGET INT NOT NULL,
   ANNUAL_PLAN TEXT NOT NULL, -- 각 부서 별 예산 소진 계획
   TARGET_ACHIEVED BOOLEAN ('T', 'F') -- 목표 매출 달성 여부
);
-- 자산 관리
CREATE TABLE ASSETS (
ASSETS_NO INT AUTO_INCREMENT PRIMARY KEY,
ASSETS_NAME VARCHAR(100),
LIABILITY_NO INT,
LIABILITY_NAME VARCHAR(100)
);
/*품질 보증 관리
-- 반제품 및 완제품 관리(재고 관리)
CREATE TABLE STOCK(
   ITEM_NO INT AUTO_INCREMENT PRIMARY KEY,
   ITEM_NAME VARCHAR(300) NOT NULL,
   IN_DATE DATE NOT NULL,
   OUT_DATE DATE NOT NULL,
   MFD_DATE DATE NOT NULL,
   EXP_DATE DATE NOT NULL,
   LOCATION VARCHAR(50) NOT NULL -- 제품 보관 위치
);
-- 품질 검사 관리
CREATE TABLE QUALITY(
   QUALITY_TEST VARCHAR(50) CHECK (QUALITY_TEST IN ('진행', '미진행')),
   TEST_DATE DATE,
   TEST_RESULT VARCHAR(50) CHECK (TEST_RESULT IN ('통과', '불량'))
);
-- 불량품 관리
CREATE TABLE DEFECT_ITEM(
   TEST_RESULT VARCHAR(50) CHECK (TEST_RESULT IN ('통과', '불량')),
   ITEM_NO INT NOT NULL,
   MFD_DATE DATE,
   DISPOSAL_DATE DATE
);
-- 품질 보증 인증서
CREATE TABLE CERTIFICATE (
   CERT_NO INT AUTO_INCREMENT PRIMARY KEY,
   CERT_NAME VARCHAR(100) NOT NULL,
   CERT_ISSUE DATE NOT NULL,
   CERT_EXP DATE NOT NULL
);*/