/*
  DB모델링 
  1. 개념적 모델링
     - 엔티티(테이블) 추출
     - 엔티티 간의 관계설정
  2. 논리적 모델링
     - 속성(컬럼) 추출
     - 정규화 작업 (1, 2, 3) ----> 이 이상으로 가면 역정규화
  3. 물리적 모델링
     - 테이블 실질적으로 작성 (CREATE 문 작성)
  
  * 정규화(Nomalization)
  - 불필요한 데이터의 중복을 제거하여 데이터모델을 구조화하는 것
  - 효율적인 자료 저장 및 데이터 무결성을 보장하고 오류를 최소화 하여 안정성을 보장하기 위해 적용함
    
    제 1 정규화 : 복수의 속성값을 갖는 속성을 분리
    제 2 정규화 : 주 식별자에 종속되지 않는 속성을 분리
    제 3 정규화 : 속성에 종속적인 속성을 제거
*/

/*
  사용자 OR 사원 관련 정보 들어가는 테이블 하나 CREATE 문 작성해서 제출
  -> PRIMARY KET : AUTO_INCREMENT (오라클의 GENERATE 뭐시기 대체)
  
  MySQL
  - 데이터 타입
  1. 문자 
     - CHAR / **VARCHAR** : 고정 및 가변 길이 문자, 반드시 크기 지정
     - **TEXT** : 매우 긴 문자열을 저장하는데 사용
  2. 숫자
     - **INT** : 정수값 저장하는데 사용
     - FLOAT / DOUBLE : 부동소수점 저장하는데 사용
     - DECIMAL : 고정소수점 저장하는데 사용
  3. 날짜 및 시간
     - **DATE** : 날짜 저장하는데 사용
     - TIME : 시간 저장하는데 사용
     - **DATETIME** / TIMESTAMP : 날짜와 시간을 함께 저장 (DEFAULT (NOW())
  4. 불리언
     - BOOLEAN / BOOL : 참(TRUE) 또는 거짓(FALSE) 값을 저장하는데 사용
  5. 이진 자료형 (사용추천X)
     - BLOB : 이진 데이터를 저장하는데 사용. 이미지나 동영상과 같은 이진 파일
	 --> 실제로는 이미지나 동영상은 따로 관리 (URL만 문자형으로 저장)
*/
DROP TABLE PROJECT_MEMBERS;
DROP TABLE USER_INFO;
DROP TABLE DEPARTMENT;
DROP TABLE GRADE;
DROP TABLE PROJECT_TASKS;
DROP TABLE PROJECT;


CREATE TABLE USER_INFO(
USER_NO INT PRIMARY KEY AUTO_INCREMENT,
ID VARCHAR(50) UNIQUE NOT NULL,
PASSWORD VARCHAR(300) NOT NULL,
EMAIL VARCHAR(100) UNIQUE,
NAME VARCHAR(50) NOT NULL,
PHONE VARCHAR(50) UNIQUE,
ADDR VARCHAR(200),
GENDER VARCHAR(10) CHECK (GENDER IN ('남', '여')),
BIRTH_DATE DATE,
HIRE_DATE DATE DEFAULT (CURRENT_DATE) ,
QUIT_DATE DATE,
DEPT_NO INT,
GRADE_NO INT
);

CREATE TABLE DEPARTMENT(
DEPT_NO INT PRIMARY KEY AUTO_INCREMENT,
DEPT_NAME VARCHAR(100) NOT NULL,
DEPT_COLOR VARCHAR(50)
);

CREATE TABLE GRADE(
GRADE_NO INT PRIMARY KEY AUTO_INCREMENT,
GRADE_NAME VARCHAR(100) NOT NULL
);

-- 프로젝트 관리 : 테이블 몇개든 상관없이 짜보시고 FOREIGN KEY 까지 걸어보는 것까지!
-- 테이블 필요한 컬럼 짜기 힘드시다면 어떤 기능이 있어야 되는지 정도로 제출해도 괜찮아요! ~내일까지

-- 프로젝트 정보 테이블
/* CREATE TABLE PROJECTS(
PROJECT_ID INT PRIMARY KEY AUTO_INCREMENT,
PROJECT_NAME VARCHAR(100) NOT NULL,
PROJECT_DESCRIPTION TEXT,
PROJECT_START_DATE DATE,
PROJECT_END_DATE DATE NOT NULL,
CREATED_DATE DATE DEFAULT (CURRENT_DATE)
);*/

CREATE TABLE PROJECT (
PRO_NO INT AUTO_INCREMENT PRIMARY KEY,
PRO_NAME VARCHAR(100) NOT NULL,
PRO_DESC TEXT,
START_DATE DATE,
END_DATE DATE,
STATUS VARCHAR(10) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단'))
);

-- 프로젝트 참여 멤버 정보 테이블
/* CREATE TABLE PROJECT_MEMBERS (
PROJECT_ID INT,
ID VARCHAR(50) UNIQUE NOT NULL,
ROLE VARCHAR(100) NOT NULL
);
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(PROJECT_ID);
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (ID) REFERENCES USER_INFO(ID);*/

-- PROJECT_MEMBERS : USER_NO, PRO_NO
CREATE TABLE PROJECT_MEMBERS(
MEMBER_NO INT AUTO_INCREMENT PRIMARY KEY,
USER_NO INT,
PRO_NO INT,
ROLE VARCHAR(50)
);

-- 프로젝트 업무 할당
/* CREATE TABLE TASKS (
TASK_ID INT PRIMARY KEY AUTO_INCREMENT,
PROJECT_ID INT,
ASSIGNED_TASK INT NOT NULL,
TASK_TITLE VARCHAR(300) NOT NULL,
DESCRIPTION TEXT,
PRIORITY VARCHAR(20) CHECK (PRIORITY IN ('HIGH', 'MID', 'LOW')),
DUE_DATE DATE,
CREATED_DATE DATE DEFAULT (CURRENT_DATE),
UPDATED_DATE DATE DEFAULT (CURRENT_DATE)
);
ALTER TABLE TASKS ADD FOREIGN KEY (PROJECT_ID) REFERENCES PROJECTS(PROJECT_ID);
ALTER TABLE TASKS ADD FOREIGN KEY (ASSIGNED_TASK) REFERENCES USER_INFO(ID); */

-- 프로젝트 : 업무들 = 1:M
-- PROJECT_MEMBERS : PRO_NO

CREATE TABLE PROJECT_TASKS(
TASK_NO INT AUTO_INCREMENT PRIMARY KEY,
PRO_NO INT,
TASK_NAME VARCHAR(100),
TASK_DESC TEXT,
STATUS VARCHAR(30) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단')),
START_DATE DATE,
END_DATE DATE,
PARENT_TASK_NO INT
);


/* -- 업무 진행 이력
CREATE TABLE TASK_HISTORY(
TASK_ID INT,
CHANGED_BY INT,
OLD_INFO TEXT,
NEW_INFO TEXT,
UPDATED_DATE DATE
);
ALTER TABLE TASK_HISTORY ADD FOREIGN KEY (TASK_ID) REFERENCES TASKS(TASK_ID);
ALTER TABLE TASK_HISTORY ADD FOREIGN KEY (CHANGED_BY) REFERENCES USER_INFO(ID);

-- 진행 업무 피드백
CREATE TABLE FEEDBACK(
FEEDBACK_NO INT PRIMARY KEY AUTO_INCREMENT,
TASK_ID INT,
ID INT,
FEEDBACK TEXT NOT NULL,
CREATED_DATE DATE DEFAULT (CURRENT_DATE)
);
ALTER TABLE FEEDBACK ADD FOREIGN KEY (TASK_ID) REFERENCES TASKS(TASK_ID);
ALTER TABLE FEEDBACK ADD FOREIGN KEY (ID) REFERENCES USER_INFO(ID);

-- 첨부파일 업로드
CREATE TABLE ATTACHMENTS(
ATTACHMENT_ID INT PRIMARY KEY AUTO_INCREMENT,
TASK_ID INT,
FILE_NAME VARCHAR(300) NOT NULL,
FILE_URL TEXT NOT NULL,
UPLOADED_BY INT
);
ALTER TABLE ATTACHMENTS ADD FOREIGN KEY (TASK_ID) REFERENCES TASKS(TASK_ID);
ALTER TABLE ATTACHMENTS ADD FOREIGN KEY (UPLOADED_BY) REFERENCES USER_INFO(ID);

-- 업무 진행상황 업로드 알림
CREATE TABLE NOTIFICATIONS (
NOTIFICATION_ID INT PRIMARY KEY AUTO_INCREMENT,
ID INT,
MESSAGE TEXT NOT NULL,
READ_YN BOOL, -- 또는 CHECK (READ_YN ('Y', 'N'))
CREATED_DATE DATE DEFAULT (CURRENT_DATE)
);
ALTER TABLE NOTIFICATIONS ADD FOREIGN KEY (ID) REFERENCES USER_INFO(ID);
*/

-- 일정 관리!
CREATE TABLE SCHEDULE (
SCHEDULE_NO INT AUTO_INCREMENT PRIMARY KEY,
SCHEDULE_TITLE VARCHAR(100) NOT NULL,
SCHEDULE_DESC TEXT,
START_DATE DATE,
END_DATE DATE,
STATUS VARCHAR(30) CHECK (STATUS IN ('진행전', '진행중', '완료', '중단')),
LOCATION VARCHAR(200),
PRO_NO INT,
TASK_NO INT,
USER_NO INT
);

CREATE TABLE SCHEDULE_MEMBERS(
SCH_MEM_NO INT AUTO_INCREMENT PRIMARY KEY,
USER_NO INT,
SCHEDULE_NO INT
);

-- DEPT_NO, GRADE_NO
ALTER TABLE USER_INFO ADD FOREIGN KEY (DEPT_NO) REFERENCES DEPARTMENT(DEPT_NO);
ALTER TABLE USER_INFO ADD FOREIGN KEY (GRADE_NO) REFERENCES GRADE(GRADE_NO);

-- PROJECT_MEMBERS :USER_NO, PRO_NO
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- PROJECT_TASKS :PRO_NO
ALTER TABLE PROJECT_TASKS ADD FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);

-- SCHEDULE : PRO_NO, TASK_NO, USER_NO
ALTER TABLE SCHEDULE ADD FOREIGN KEY (PRO_NO) REFERENCES PROJECT(PRO_NO);
ALTER TABLE SCHEDULE ADD FOREIGN KEY (TASK_NO) REFERENCES PROJECT_TASKS(TASK_NO);
ALTER TABLE SCHEDULE ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- SCHEDULE_MEMBERS : SCHEDULE_NO
ALTER TABLE  SCHEDULE_MEMBERS ADD FOREIGN KEY (SCHEDULE_NO) REFERENCES SCHEDULE(SCHEDULE_NO);

-- 고객관계관리, 인전자원관리, 재무관리, 품질보증관리